<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Thoughts of an Introvert</title>
 <link href="http://thoughtsofanintrovert.com//atom.xml" rel="self"/>
 <link href="http://thoughtsofanintrovert.com/"/>
 <updated>2016-06-25T23:47:25-04:00</updated>
 <id>http://thoughtsofanintrovert.com</id>
 <author>
   <name>Mark Otto</name>
   <email>markdotto@gmail.com</email>
 </author>

 
 <entry>
   <title>POCO and OpenSSL Using C++ on Android - Part 1</title>
   <link href="http://thoughtsofanintrovert.com///poco-openssl-android-part-1"/>
   <updated>2016-06-23T00:00:00-04:00</updated>
   <id>http://thoughtsofanintrovert.com/poco-openssl-c++-android-part-1</id>
   <content type="html">&lt;p&gt;Recently I’ve had an interest in using C++ to share code between iOS and Android, and have used a project called &lt;a href=&quot;https://github.com/dropbox/djinni&quot;&gt;Djinni&lt;/a&gt; (created by the devs over at Dropbox) to do the behind the scenes work that would be a pain to do manually. Definitely check out Djinni if you are at all curious in pursuing this further.&lt;/p&gt;

&lt;p&gt;I’ve successfully been able to use Djinni to compile simple C++ code on both iOS and Android, and it is great to be able to share a lot of business logic between the two platforms. However, one thing I’ve really wanted, is to use a networking library written in C++ on both iOS and Android. This would save a lot of time to have the networking logic written out once, and then just call some C++ methods from Swift/Java. One place for the code to sit, and if something breaks, then it should only need to be fixed once.&lt;/p&gt;

&lt;p&gt;That all sounds good, but OpenSSL is a real pain to get working on Android. iOS is fairly easy compared to Android. OpenSSL has a wiki that shows how to build for Android, but it doesn’t say how to compile for all Architectures. And a guy like me who is not a library engineer, and doesn’t claim to be an expert in C++, does not have any inkling on how to compile for all Android architectures. I’ve definitely learned a lot through this whole process, but I still do not claim to know enough. I hope that these posts will serve as some much needed documentation on the process. The web has either very old documentation, or no documentation at all on many of these topics.&lt;/p&gt;

&lt;p&gt;I plan on this being a multi-part series of articles explaining the process. In this first article I’ll explain how to build OpenSSL for Android.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;compiling-openssl-for-android&quot;&gt;Compiling OpenSSL for Android&lt;/h2&gt;

&lt;p&gt;Let’s get this part out of the way. OpenSSL is an old and bloated library, and I really wish networking libraries would move on to something more slimmed down. Google has recently moved on to BoringSSL on Android, but POCO specifically uses OpenSSL. So I’m going to walk you through the steps of building OpenSSL for Android.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you have the &lt;a href=&quot;https://developer.android.com/ndk/downloads/index.html&quot;&gt;Android NDK&lt;/a&gt; setup on your local machine, and have set up the &lt;a href=&quot;https://developer.android.com/ndk/guides/standalone_toolchain.html&quot;&gt;Standalone Toolchain&lt;/a&gt;. I’m not going to detail how to do this, but a good starting place is &lt;a href=&quot;https://gist.github.com/Tydus/11109634&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Download the latest version of &lt;a href=&quot;https://www.openssl.org/source/&quot;&gt;OpenSSL&lt;/a&gt; (I’m using 1.0.2h).&lt;/li&gt;
  &lt;li&gt;Build OpenSSL for all Android architectures:
    &lt;ul&gt;
      &lt;li&gt;OpenSSL has a &lt;a href=&quot;https://wiki.openssl.org/index.php/Android&quot;&gt;Wiki&lt;/a&gt; on how to build for Android. If you know what you are doing, then this might be the best place to do this step. If so, skip the next section.&lt;/li&gt;
      &lt;li&gt;If you don’t know what you are doing like me, then download a script that will do this step for you. I’m using the script found &lt;a href=&quot;https://github.com/stdchpie/android-openssl&quot;&gt;here&lt;/a&gt;. Follow the steps in the next section.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;build-openssl-for-all-android-architectures&quot;&gt;Build OpenSSL for All Android Architectures&lt;/h4&gt;

&lt;p&gt;If you already know how to do this, and you don’t need to use the script found &lt;a href=&quot;https://github.com/stdchpie/android-openssl&quot;&gt;here&lt;/a&gt;, then skip this section.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clone the GitHub project mentioned in the link above (&lt;a href=&quot;https://github.com/stdchpie/android-openssl&quot;&gt;here it is again&lt;/a&gt; for good measure).&lt;/li&gt;
  &lt;li&gt;Unzip OpenSSL into a folder named &lt;code&gt;openssl&lt;/code&gt;. Your folder structure should look something like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;openssl&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;openssl-1.0.2h/&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
    &lt;p&gt;Put the &lt;code&gt;build-all-arch.sh&lt;/code&gt; and &lt;code&gt;setenv-android-mod.sh&lt;/code&gt; into the &lt;code&gt;openssl&lt;/code&gt; folder created in the last step.&lt;/p&gt;
  &lt;/li&gt;
&lt;li&gt;
    &lt;p&gt;You’ll need to modify the &lt;code&gt;build-all-arch.sh&lt;/code&gt; script to build for your OpenSSL version. Go to line 56, and you’ll see the following:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;style&gt;
#offset-55 + .highlight code {
    counter-increment: line-numbering 55;
}
&lt;/style&gt;

&lt;div id=&quot;offset-55&quot;&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openssl-1.0.1j
&lt;/span&gt;&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;xCFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-DSHARED_EXTENSION=.so -fPIC -DOPENSSL_PIC -DDSO_DLFCN -DHAVE_DLFCN_H -mandroid -I$ANDROID_DEV/include -B$ANDROID_DEV/$xLIB -O3 -fomit-frame-pointer -Wall&amp;quot;&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;perl -pi -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/install: all install_docs install_sw/install: install_docs install_sw/g&amp;#39;&lt;/span&gt; Makefile.org&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;
    &lt;p&gt;Change this to be your OpenSSL version. Mine looks like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;style&gt;
#offset-55 + .highlight code {
    counter-increment: line-numbering 55;
}
&lt;/style&gt;

&lt;div id=&quot;offset-55&quot;&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openssl-1.0.2h
&lt;/span&gt;&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nv&quot;&gt;xCFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-DSHARED_EXTENSION=.so -fPIC -DOPENSSL_PIC -DDSO_DLFCN -DHAVE_DLFCN_H -mandroid -I$ANDROID_DEV/include -B$ANDROID_DEV/$xLIB -O3 -fomit-frame-pointer -Wall&amp;quot;&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;perl -pi -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/install: all install_docs install_sw/install: install_docs install_sw/g&amp;#39;&lt;/span&gt; Makefile.org&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;
    &lt;p&gt;Now your folder structure should look like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;openssl&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;build-all-arch.sh*
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;openssl-1.0.2h/
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;setenv-android-mod.sh*&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;
    &lt;p&gt;Now you are ready to build! Just run:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;openssl&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./build-all-arch.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;When that’s done building, you should see a folder called &lt;code&gt;prebuilt&lt;/code&gt; within the &lt;code&gt;openssl&lt;/code&gt; folder. This will contain all of the shared libraries that will be necessary to build POCO.&lt;/p&gt;

&lt;p&gt;Congratulations! You just got through the part that was definitely the biggest pain for me. I spent a lot of time trying to build OpenSSL through their Wiki, Gradle, Android makefiles, etc. and finally found that script.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In my next post I’ll detail how to build POCO. I’ll link the article here once it’s done. Thanks for reading, and let me know if you have any questions in the comments below!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Protocol Oriented Programming in Swift 2.0</title>
   <link href="http://thoughtsofanintrovert.com///protocol-oriented-programming"/>
   <updated>2015-06-20T00:00:00-04:00</updated>
   <id>http://thoughtsofanintrovert.com/protocol-oriented-programming</id>
   <content type="html">&lt;p&gt;So I’m really curious about this video at WWDC this year. I’m trying to wrap my mind around this concept, which is definitely a challenge. Through my career of programming I’ve only used Object-Oriented Programming (OOP); so Protocol-Oriented Programming (POP?) sounds like a pretty cool concept. However, POP has some limitations with the current usage of classes in iOS development.&lt;/p&gt;

&lt;p&gt;See video &lt;a href=&quot;https://developer.apple.com/videos/wwdc/2015/?id=408&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;protocols-and-structs-instead-of-classes&quot;&gt;Protocols and Structs Instead of Classes&lt;/h2&gt;

&lt;p&gt;The underlying theme seems to be using protocols and structs where possible instead of classes. That seems all fine-and-dandy until you try conforming to a class protocol to call some delegate methods. Structs can’t conform to class protocols, such as NSURLConnectionDelegate. I tried doing this today on an app prototype of mine using the Sqoot API. I had a class for helper methods for accessing Sqoot. I wanted to try out this POP stuff, so I decided I’d try to change around my logic. Well when I changed my class to a struct like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SqootHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURLConnectionDataDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Well… I got the following error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Non-class type &amp;#39;SqootHelper&amp;#39; cannot conform to class protocol &amp;#39;NSURLConnectionDataDelegate&amp;#39;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;I think I’m just going to have my view controller conform to the NSURLConnectionDataDelegate, and make a JSONParser struct/protocol combo.&lt;/p&gt;

&lt;h2 id=&quot;benefits-worth-it&quot;&gt;Benefits worth it?&lt;/h2&gt;

&lt;p&gt;I understand that POP provides many benefits, but when I can’t find a use for it I have a hard time accepting it as part of my workflow. I’m going to try to force myself to refactor my code each time to include POP. So maybe… eventually… It’ll start to naturally come to me as a viable option when starting new code.&lt;/p&gt;

&lt;p&gt;I do think the benefits are ultimately worth it, and I’m sure Apple will continue to expand on this approach. They are calling Swift 2.0 the first Protocol-Oriented Programming language, which of course it is, but it’s also Object-Oriented. I’m curious to see what others can do with this.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WWDC 2015 - Happy to be an iOS Developer</title>
   <link href="http://thoughtsofanintrovert.com///wwdc-2015-my-thoughts"/>
   <updated>2015-06-11T00:00:00-04:00</updated>
   <id>http://thoughtsofanintrovert.com/wwdc-my-thoughts</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/wwdc15.jpg&quot; alt=&quot;WWDC15&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took off Monday and Tuesday of this week to watch the WWDC 2015 keynote, and any of the live sessions I could catch. It’s crazy how huge these events are, and seeing the App Store stats just makes me realize how large the iOS ecosystem is. I feel really blessed to be able to do what I love, and to live in a time where mobile development is necessary anywhere you turn. I know this may change over time, but I’m excited to see where technology goes throughout my lifetime. I hope I can make it to WWDC in person one of these years!&lt;/p&gt;

&lt;p&gt;I wanted to take a little bit of time to write a little on my thoughts from WWDC 2015.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;swift-20&quot;&gt;Swift 2.0&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Definitely&lt;/em&gt; interested in playing around with this. I’ve done a little coding with Swift over the past year, and it was definitely not as polished as Objective-C. While I’m not expecting it to be at that level yet, I’m really interested to see the improvements like…&lt;/p&gt;

&lt;h3 id=&quot;syntax-updates&quot;&gt;Syntax Updates&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;guard&lt;/code&gt; statement really has me looking forward to playing with it. It reminds me a little of the &lt;code&gt;check&lt;/code&gt; statement in SAP-ABAP. It will allow you to check a BOOL or equivalent, and if it fails then you can return. It really helps to cut down on many embedded &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; sounds cool too. You could call some cleanup code that only gets called right when execution is about to leave the scope. I’d need to play around with it to see its usefulness.&lt;/p&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h3&gt;

&lt;p&gt;I’m looking forward to this. I’m used to throwing and catching exceptions in SAP-ABAP quite regularly. I haven’t noticed me having to do this much in Objective-C. It will be nice to have this functionality in Swift.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;￼&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;￼&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	     &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;open-source&quot;&gt;Open-Source&lt;/h3&gt;

&lt;p&gt;This was an unnexpected announcement. Apple will be open-sourcing Swift by the end of this year. They will be encouraging contributions from the community, &lt;em&gt;and&lt;/em&gt; a Linux port will be available. I think this is a great step for Apple to take.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;xcode-7&quot;&gt;Xcode 7&lt;/h2&gt;

&lt;p&gt;Xcode has some really great updates too.&lt;/p&gt;

&lt;h3 id=&quot;playgrounds&quot;&gt;Playgrounds&lt;/h3&gt;

&lt;p&gt;My excitement for Playgrounds last year died off rather quickly. I played around with some Swift code in a Playground, but that’s really all that happened. I can see now that Apple plans to make Playgrounds a way to make documentation and demonstrations. That’s a really cool idea. Plus it accepts Markup within comments for formatted text.&lt;/p&gt;

&lt;h3 id=&quot;address-sanitizer&quot;&gt;Address Sanitizer&lt;/h3&gt;

&lt;p&gt;This sounds like a really nice tool to point out weak areas in your code when a crash happens. It’s especially useful when you can’t pinpoint the issue. It will show the exact code that’s to blame, &lt;em&gt;and&lt;/em&gt; show potential issues. I really want to get my hands on this, but I guess I need some bugs to fix first… Time to create some! (?)&lt;/p&gt;

&lt;h3 id=&quot;interface-builder&quot;&gt;Interface Builder&lt;/h3&gt;

&lt;p&gt;Some cool affects have been added to Interface Builder, like the rendering of blurs and transparencies. That certainly makes it easier to make your storyboard look exactly how it will render on the device.&lt;/p&gt;

&lt;p&gt;Stack views sound like an interesting way to group views so that they behave consistently together. I’d like to see a demo on this as it sounds interesting, but the terminology doesn’t really spark any solid ideas in my mind.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;app-slicing&quot;&gt;App Slicing&lt;/h2&gt;

&lt;p&gt;App slicing is a new method that Apple is taking to slim down applications for download on to a user’s device. Instead of downloading all assets, the user will only download the assets that are necessary for their device. It’s a very nice way to slim down those larger apps that &lt;em&gt;just&lt;/em&gt; go over the download size limit.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I didn’t mention a few things, like WatchOS 2. I don’t have any experience with the Apple Watch, but do hope to eventually branch out to it. I also didn’t mention the multi-tasking on an iPad, which I think is &lt;em&gt;really&lt;/em&gt; cool, but I can never find a use for my iPad in my daily routine. I’d rather have my MacBook Pro and my iPhone. However, I know I’ll have to start accounting for it when making an iPad app. It’s definitely something I want to look more in to.&lt;/p&gt;

&lt;p&gt;I’m really excited to start trekking more into the realm of Swift. I really like the style of the language, and the fact that it’s going open-source really has me intrigued. Apple’s new developer tools look like a great way to tweak and refine an app, so I’ll definitely be giving them a spin. All-in-all I’m really excited to start working with iOS 9.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JHCollapsingNavbar</title>
   <link href="http://thoughtsofanintrovert.com///jhcollapsingnavbar"/>
   <updated>2015-06-05T00:00:00-04:00</updated>
   <id>http://thoughtsofanintrovert.com/jhcollapsingnavbar</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/navbar.gif&quot; alt=&quot;Navbar&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m happy to announce my first contribution to the iOS development community on Github: JHCollapsingNavbar! I’ve been in the process of creating my first app, which is about 75% complete, and one of the features I made was a collapsing view at the top when the user scrolls. This is &lt;em&gt;very&lt;/em&gt; similar to what the Facebook and Google Inbox apps do, which were my inspiration for this. I’ll talk a little about the background of how I wrestled with the challenge of creating this, but if you’d like to use the code for your own project then go ahead and head on over to &lt;a href=&quot;https://github.com/joshhaines/JHCollapsingNavbar&quot;&gt;JHCollapsingNavbar&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;I wanted a collapsing view like what is seen in the Facebook app. There are other projects out there that do something similar, but I figured - how hard can it be? Well I ran in to some challenges along the way. I’ll try to recall most of them here.&lt;/p&gt;

&lt;h3 id=&quot;first-approach&quot;&gt;First Approach&lt;/h3&gt;

&lt;p&gt;I first tried using a wide combination of UIEdgeInsets, “y” values of the views, scroll deltas, and at one point I was even using “delta of delta” (I was getting the scroll direction with this). I just could &lt;em&gt;not&lt;/em&gt; get everything to work correctly with each other. I’d get one direction working, but then the other direction would break. I’d get the second direction working, but then snapping would break. I’d get snapping working, and then the view would glitch to a random location.&lt;/p&gt;

&lt;p&gt;Getting that smooth 1-to-1 movement like you see in Facebook and Google Inbox was also a challenge. Certain approaches would move the navbar, but there’d be lag, which caused it too not look at all comparable to what is seen in Facebook.&lt;/p&gt;

&lt;p&gt;Looking at my old code, I have so much commented out code, so I just wrote “lol” at the top because I laugh whenever I look at it. I had so much random code that it was getting to be too much to handle for one feature. So I decided to start another project with a different approach.&lt;/p&gt;

&lt;h3 id=&quot;using-constraints&quot;&gt;Using Constraints&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the approach that I was looking for. I set a top constraint on my custom navbar view. My table view was constrained to my navbar. So whenever my navbar moves, my table view should resize. I hooked up my constraint to my view controller as a property, then got to work.&lt;/p&gt;

&lt;p&gt;One of the things I noticed that I needed was a second pan gesture recognizer added to my table view. The pan gesture recognizer that is included with the table view is read-only, and I needed to add my own logic. There’s a method in the UIGestureRecognizerDelegate, &lt;code&gt;(BOOL)gestureRecognizer: shouldRecognizeSimultaneouslyWithGestureRecognizer:&lt;/code&gt;, that allows a second gesture recognizer to be evaluated simultaneously when returning YES. Now that I had my own pan gesture recognizer I was able to add my logic.&lt;/p&gt;

&lt;h3 id=&quot;animations-and-pan-gesture-states&quot;&gt;Animations and Pan Gesture States&lt;/h3&gt;

&lt;p&gt;At first I decided to try out UIView animations. I could get them to work, but the smooth transition I wanted didn’t seem to work correctly - more on that in a little. I then used Facebook Pop for my animations. Facebook Pop was very easy to understand and use on my constraints.&lt;/p&gt;

&lt;p&gt;I also wanted to react to the changes in the pan gesture state, so I found out about KVO and ReactiveCocoa. I decided to give ReactiveCocoa a shot, and was able to easily listen to a change in the pan gesture state. This allowed me to snap the navbar when the user stopped scrolling, and I used a Pop animation for this snapping logic.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, now that I wanted to publish this on Github, I wanted to remove dependance on third party libraries if possible, so this prompted me to try to figure out how to match my Pop animations with UIView animations. I noticed that when I did this that my tableView would &lt;em&gt;not&lt;/em&gt; transition smoothly when my navbar would snap. What I learned was that not only did the navbar need a call to &lt;code&gt;layoutIfNeeded&lt;/code&gt; on the view, but the table view also needed this call. That triggered something in my mind where I think I now understand UIView animations a lot better now.&lt;/p&gt;

&lt;p&gt;Removing dependance on ReactiveCocoa was a small challenge. I effectively just checked for UIGestureRecognizerStateEnded in my gesture recognizer selector. For some reason that idea never entered my mind before, and I just want to slap my forehead.&lt;/p&gt;

&lt;p&gt;So now after removing those two library dependancies I had clean code that anyone could use without downloading Facebook Pop and ReactiveCocoa.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I’m really excited to get some feedback on this project, and anyone looking to contribute, please do. I know this could be expanded to include other views that inherit from UIScrollView. I’d love to hear any ideas or questions in the comments below. Thanks for reading!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to TOAI!</title>
   <link href="http://thoughtsofanintrovert.com///welcome-to-toai"/>
   <updated>2015-06-04T00:00:00-04:00</updated>
   <id>http://thoughtsofanintrovert.com/welcome-to-toai</id>
   <content type="html">&lt;p&gt;Hello and welcome to Thoughts of an Introvert. If you’ve ever been to my site before, then you’ll realize that this isn’t the same look, and the old content is missing.  I’ve gone through a few hosts since first opening this blog a couple years ago, and I decided to start fresh. I’m hosting this site on my &lt;a href=&quot;http://github.com/joshhaines&quot;&gt;GitHub page&lt;/a&gt;, and using Jekyll as the blogging platform.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve been pretty busy building content with Objective-C in an effort to make iOS development my main career focus. So going forward I will be posting about my ongoing projects, and will share any code that I decide to make public.&lt;/p&gt;

&lt;h3 id=&quot;to-potential-employers&quot;&gt;To Potential Employers&lt;/h3&gt;

&lt;p&gt;I am extremely passionate about mobile development, and my focus is currently on iOS development. I have 5+ years of development experience (not including college), and work on my own projects outside of work. I am currently in the market for an iOS developer job in the Raleigh-Durham area. If you’d like to talk, I’d be more than happy to connect on &lt;a href=&quot;https://www.linkedin.com/in/joshuashaines&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by, and feel free to check-out my &lt;a href=&quot;http://thoughtsofanintrovert.com/about&quot;&gt;About&lt;/a&gt; page for more info!&lt;/p&gt;
</content>
 </entry>
 

</feed>
